Secure Socket Layer (SSL)
-------------------------

Using the OpenSSL library shroudBNC supports encrypted client connections. Additionally client certificates can be used for authenticating users.

Why?
----

IRC is often used over insecure/unencrypted connections. While the problem of monitoring networks using packet sniffers might not be so obvious for (wired) LAN/WAN connections it becomes apparent when considering wireless connections, e.g. on a campus, where every other WLAN user can tap into another user's data transfers.

Compiling sBNC with support for SSL
-----------------------------------

The "configure" script provides an option for enabling SSL: --enable-ssl, it can be used like this:

shroud@temple:~/build/sbnc$ ./configure --enable-ssl
checking for g++... g++
checking for C++ compiler default output file name... a.out
checking whether the C++ compiler works... yes
<snip>
config.status: creating config.h
config.status: config.h is unchanged
shroud@temple:~/build/sbnc$

Once you've done that you just have to run "make".

After compiling and linking some files you should have an SSL-enabled "sbnc" binary:

shroud@temple:~/build/sbnc$ ls -l sbnc
-rwxr-xr-x  1 shroud shroud 2148313 2005-11-24 21:30 sbnc

How to set up sBNC for SSL
--------------------------

sBNC supports two kinds of listeners: unencrypted and encrypted ones. During startup two configuration settings are read to determine whether the user wants unencrypted, encrypted listeners or both:

system.port - sets the port for the unencrypted listener
system.sslport - sets the port for the ssl-enabled listener

If neither of those settings are used, sBNC falls back to creating an unencrypted listener on port 9000.

You can remove the "system.port" setting from your configuration file if you just want an encrypted listener.

These settings can be set in the bouncer's main configuration file: sbnc.conf

Once you've enabled SSL sBNC expects to find the following files in your bouncer's directory:

ca.crt - the public key of the certificate authority, client certificates must be signed by this CA
sbnc.crt - the public part of the server's key
sbnc.key - the private part of the server's key

The "openssl" utility can be used to create certificates.

Client Certificates
-------------------

Clients like irssi or mIRC which support client certificates can use such certificates for authentication.

While checking a client certificate the server reads the CN ("common name") field and uses its value as the user's account name. If the certificate is valid and signed by the CA (i.e. ca.crt) the user is being logged on.

sBNC will not check the values given by the /user and /pass commands if a valid certificate is found.